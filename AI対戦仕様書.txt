このゲームはprocessingで作られています。
なので、動かすためにはprocessingが必要です。
ネットで「processing」と検索して各自ダウンロードしてください。

processingがダウンロードできたらこのファイルが入っている[Enogoon]フォルダを
~/Documents/Processing
の中に入れてください。(Macの場合は書類というところになるかと思われます)

自分の使いたいキャラクターの画像を用意してください。
自分で描いてもネット上のフリー素材を持ってきてもかまいません。
画像は何でも大丈夫ですが、50×50ピクセルの大きさに拡大縮小しますので、
縮んだり引き伸ばされたりするのが嫌な方はご注意ください。
用意できたらそれを
~/Documents/Processing/Enogoon
フォルダ内に入れてください。ファイルの名前はアルファベットと数字のみで構成してください。

[Enogoon]フォルダ内の[Enogoon]ファイルを開くとprocessingが起動します。
左上の再生ボタンを押すとゲームが開始されます。

もしコメントが読めない場合は
http://www.mlab.im.dendai.ac.jp/~tomoriya/wiki/index.php?Processing%CA%B8%BB%FA%B2%BD%A4%B1%B2%F3%C8%F2
を参照して日本語が対応可能な文字コードに変化させてみてください。

画面が大きすぎたり小さすぎたりする場合は[Enogoon]ファイルの以下の部分
=====================================================
void setup()
{
  size(600,600);
  smooth();
  frameRate(60);
=====================================================
のsize(600,600)の部分を変更すれば好きな大きさに変更できます。
例えばsize(900,900)にすれば900×900ピクセルの大きさの画面になります。
長方形には対応しておりませんので、必ず画面は正方形にしてください。

AIの作り方ですが、まず最初にタブ群の横にある▼を押して[New Tab]を選択して新しいタブを作ります。
タブに名前をつける必要がありますが、ここは自由に名前を付けてかまいません。(アルファベットと数字限定)
AI対戦当日にはこのタブ(pdfファイル)とAIのイメージ画像をＵＳＢメモリ等に入れて持ってきて貰います。

次に今作ったタブに以下のプログラムをコピー&ペーストしてください。

=====================================================
↓ここから（この行はコピーしない）
class /* To Do */ extends PlayCharacter
{
  /* To Do */()
  {
    this.setAiName("/* To Do */");
    this.setImg(loadImage("/* To Do */"));
    this.setWeapon(/* To Do */);
  }
  
  public int ai(StageTile[][] sT)
  {
    /* To Do */
  }
}
↑ここまで（この行はコピーしない）
=====================================================

/* To Do */という文字で囲まれた部分が6箇所あり、そこが自分で書く部分です。それ以外はいじらないでください。

最初の行から3行目までの2つの/* To Do */は全て同じ内容を入れてください。(以下の部分)
=====================================================
  class /* To Do */ extends PlayCharacter
  {
    /* To Do */()
    {
=====================================================
この/* To Do */は最初の文字がアルファベットの大文字で他がアルファベットもしくは数字で構成されていれば問題ありません。
以下修正例
=====================================================
例)
  class MyAi extends PlayCharacter
  {
     MyAi()
     {
=====================================================
など

5行目の
=====================================================
　this.setAiName("/* To Do */");
=====================================================
の部分は自分のAIの名前を入力する場所なので好きな名前を入れてください。日本語入力でも問題ありません。
ただし、名前は半角１４文字(全角７文字)以内にしてください。それを超えると表示がおかしくなります。
以下修正例
=====================================================
例)
　this.setAiName("自作AI");
=====================================================
など

6行目の
=====================================================
　this.setImg(loadImage("/* To Do */"));
=====================================================
の部分は自分の使いたいキャラクターのイメージ画像のファイルの名前を入力してください。
この説明の最初のほうに
~/Documents/Prosessing/OtiotiFight
というフォルダ内に入れたやつです。必ず拡張子（.png .jpg みたいなやつのこと）も書き添えてください。
パスは必要ありません。
=====================================================
例)
　this.setImg(loadImage("ika.png"));
=====================================================
など

7行目の
=====================================================
　this.setWeapon(loadImage("/* To Do */"));
=====================================================
の部分ではAIに使わせる武器を1~5の数字で選択してもらいます。
1:ランチャー
2:ショットガン
3:キャノン
4:地雷
5:ローラースケート
となっています。武器については別のテキストで詳しく解説してあります。
また、int(random(1,6))とすればランダムに武器を選ぶこともできます。自信のある方はどうぞ。

10行目から13行目の
=====================================================
  public int ai(StageTile[][] sT)
  {
    /* To Do */
  }
=====================================================
が実際に皆さんに作ってもらうAiを書く部分になりますが、そこを書く前に[Enogoon]タブを開いて
一箇所付け加えてもらうところがあります。それは 75~84行目の
======================================================
    sC[0]=new RandomAi1();             //キャラクターを登録する場所
    sC[1]=new RandomAi2();
    sC[2]=new RandomAi3();
    sC[3]=new RandomAi4();
    sC[4]=new RandomAi5();
    /* To Do */
======================================================
となっている部分ですが、例によってこの/* ToDo */の部分を書き換えてもらいます。
書き換え方は、/* To Do */を消して代わりに
    sC[10] = new /*クラスの名前*/();
のように書き換えるのですが、この際/*クラスの名前*/は自分が作った新しいタブで修正した1~3行目の/* To Do */
の書き換えた名前を入力します。
今までの例で書き直すのであれば
======================================================
例)
    sC[0]=new RandomAi1();             //キャラクターを登録する場所
    sC[1]=new RandomAi2();
    sC[2]=new RandomAi3();
    sC[3]=new RandomAi4();
    sC[4]=new RandomAi5();
    sC[10]=new MyAi(5);
======================================================
という風に直します。

ここまで終わればAIを書くための前準備は終了です。次に実際にAIを書いていきましょう。
先ほども行ったとおり自作の新しいタブの10~13行目の間にAIを書いていきます。
=====================================================
  public int ai(StageTile[][] sT)
  {
    /* To Do */
  }
=====================================================
このメソッド（メソッドがわからなければ関数と考えてください）の返り値によって、行動が決定されます。
具体的には
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0:停止
1:上に移動
2:右に移動
3:下に移動
4:左に移動
5:攻撃
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
となっています。
ですので例えば
=====================================================
例)
  public int ai(StageTile[][] sT)
  {
    return 0;
  }
=====================================================
とすれば、永遠にその場に居続けるAIができますし、
=====================================================
例)
  public int ai(StageTile[][] sT)
  {
    return 5;
  }
=====================================================
とすれば永遠にその場で攻撃し続けるAIになります。
とはいえこれだけでは判断の材料がないので、自分やステージの状態を調べる方法が用意されています。
それについてはまた別のテキストに詳細が記載されています。

以上が現状のAI仕様です。今後改善などが行われるかもしれませんがとりあえずこれで作り始めてください。