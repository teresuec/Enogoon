AI対戦に必要な情報を取得する方法として、いくつかのメソッドを用意してあります。
これらのメソッドの返り値を使って状況判断を行ってください。(メソッドが分からなければ関数と考えてください)

まず最初に、自分に関する情報を取得する方法として、
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
自分の位置を調べるメソッド
自分の向きを調べるメソッド
自分の必殺技フラグを調べるメソッド
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
が用意されています。

・自分の位置を調べるメソッド
======================================================
this.getX()
this.getY()
======================================================
これでそれぞれ自分のx座標とy座標を取得できます。
座標は一番左上の座標を(0,0)として、１マスごとに１ずつ増えていきます。
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
例)    自分がこの位置(2,3)にいる場合、
       this.getX()は2,this.getY()は3の値を返します。
       □□□□□□□□
       □□□□□□□□
       □□□□□□□□
       □□■□□□□□
       □□□□□□□□
       □□□□□□□□
       □□□□□□□□
       □□□□□□□□
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

・自分の向きを調べるメソッド
======================================================
this.getDirection()
======================================================
これの返り値で自分の向きが取得できます。
具体的には
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0:上向き
1:右向き
2:下向き
3:左向き
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
となっています。移動とは数値が異なるので注意しましょう。

・自分の必殺技フラグを調べるメソッド
======================================================
this.getSpecial()
======================================================
このメソッドでは自分が必殺技を使える残り時間をフレーム単位で取得できます。(１秒＝60フレーム)
======================================================
例)
if(this.getSpecial()>0)
{
  //プログラム
}
======================================================
という風に使えば必殺技が使えるかどうかを調べられます。

次に、ステージに関する情報を取得する方法として、
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
特定のマスが塗られているかどうかを調べるメソッド
特定のマスが危険かどうかを調べるメソッド
特定のマスに地雷があるかどうかを調べるメソッド
特定のマスにミラクルスターがあるか調べるメソッド
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
が用意されています。

・特定のマスが塗られているかどうかを調べるメソッド
=====================================================
this.paint(sT,x,y)
=====================================================
これの返り値によってマスの状態を知ることができ、
具体的には
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0:まだ塗られていない
1:自分の色に塗られている
2:敵の色に塗られている
3:枠外
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
となっています。
第一引数には必ずsTと書いてください。x,yには調べたいマスの座標を入れます。
例えば自分の１つ上のマスを調べたい場合、これと上記のgetX,getYを組み合わせて
======================================================
例)
this.paint(sT,this.getX(),this.getY()-1)
======================================================
とすれば可能なわけです。
ちなみに、
======================================================
例)
this.paint(sT,0,-1)
======================================================
のようにうっかり枠外を検索してしまうと3が返ってきます。

・特定のマスが危険かどうかを調べるメソッド
=====================================================
this.danger(sT,x,y)
=====================================================
これの返り値によってそのマスが危険かどうかを知ることができ、
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0:安全
1:危険
2:枠外
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
となっています。
具体的には
・ステージ上を飛んでいる弾の軌道上
・ステージ上を飛んでいる大砲の弾の着弾地点周辺
・ステージ上に設置されている地雷の周囲
が危険と判断されます。(もちろんアトミックキャノンや大型地雷にも対応しています)

・特定のマスに地雷があるかどうかを調べるメソッド
=====================================================
this.landmine(sT,x,y)
=====================================================
これの返り値によってそのマスに地雷があるかどうかを知ることができ、
具体的には
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0:地雷はない
1:地雷がある
2:大型地雷がある
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
となっています。
枠外を検索した場合は0が返ってきます。(以下、記載のないものについても同様)

・特定のマスにミラクルスターがあるかどうかを調べるメソッド
=====================================================
this.star(sT,x,y)
=====================================================
これの返り値によってそのマスにミラクルスターがあるかどうかを知ることができ、
具体的には
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0:ミラクルスターはない
1:ミラクルスターがある
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
となっています。

最後に、敵に関する情報を取得する方法として、
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
特定のマスにいる敵の向きを調べるメソッド
特定のマスにいる敵の武器を調べるメソッド
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
が用意されています。

・特定のマスにいる敵の向きを調べるメソッド
=====================================================
this.enemy(x,y)
=====================================================
これの返り値によって特定のマスにいる敵の向きを知ることができ、
具体的には
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0:敵はいない
1:上向き
2:右向き
3:下向き
4:左向き
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
となっています。
第一引数にsTは必要ないので注意しましょう。
敵がいるかどうかを調べる時にもこのメソッドを使ってください。
======================================================
例)
if(this.enemy(this.getX(),this.getY()-1)>0)
{
  //プログラム
}
======================================================
という風に使えば自分の１つ上のマスに敵がいた場合のプログラムを組むことができます。

・特定のマスにいる敵の武器を調べるメソッド
=====================================================
this.weapon(x,y)
=====================================================
これの返り値によって特定のマスにいる敵の武器を知ることができ、
具体的には
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0:敵はいない
1:ランチャー
2:ショットガン
3:キャノン
4:地雷
5:ローラースケート
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
となっています。

以下、あまり重要ではありませんが、
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
ステージの広さを調べるメソッド
自分の武器を調べるメソッド
自分の無敵時間を調べるメソッド
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
なども一応用意してあります。

・ステージの広さを調べるメソッド
=====================================================
this.getField()
=====================================================
ステージの一辺の長さを取得できます。
例えば２０×２０マスのステージなら20が返ってきます。ステージは必ず正方形です。
狭いステージで無駄な処理をしたくない方はどうぞ。

・自分の武器を調べるメソッド
=====================================================
this.getWeapon()
=====================================================
自分の武器を取得できます。
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
1:ランチャー
2:ショットガン
3:キャノン
4:地雷
5:ローラースケート
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
武器をランダムで選んだ場合にどうぞ。

・自分の無敵時間を調べるメソッド
=====================================================
this.getInvincible()
=====================================================
自分の残り無敵時間をフレーム単位で取得できます。(１秒＝60フレーム)

※チーム戦でのメソッドによる味方の扱いについて
・paintでは味方の塗ったマスは自分の塗ったマスと判定されます
・enemyとweaponでは味方は感知されません